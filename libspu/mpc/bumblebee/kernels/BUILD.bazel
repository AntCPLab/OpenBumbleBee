# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:spu.bzl", "spu_cc_library", "spu_cc_test")

package(default_visibility = ["//visibility:public"])

spu_cc_library(
    name = "bumblebee_kernels",
    hdrs = ["kernels.h"],
    deps = [
        ":arith",
        ":bits",
        ":compare",
        ":conversion",
        ":logic",
        ":rand",
        ":truncate",
    ],
)

spu_cc_library(
    name = "arith",
    deps = [
        ":add",
        ":matmul",
        ":mul",
    ],
)

spu_cc_library(
    name = "bits",
    srcs = ["bits.cc"],
    hdrs = ["bits.h"],
    deps = [
        "//libspu/mpc:kernel",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
        "//libspu/mpc/common:communicator",
    ],
)

spu_cc_library(
    name = "rand",
    srcs = ["rand.cc"],
    hdrs = ["rand.h"],
    deps = [
        "//libspu/mpc:kernel",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
    ],
)

spu_cc_library(
    name = "add",
    srcs = ["add.cc"],
    hdrs = ["add.h"],
    deps = [
        "//libspu/mpc/bumblebee:type",
    ],
)

spu_cc_library(
    name = "mul",
    srcs = ["mul.cc"],
    hdrs = ["mul.h"],
    deps = [
        "//libspu/mpc/bumblebee:env",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
    ],
)

spu_cc_library(
    name = "matmul",
    srcs = ["matmul.cc"],
    hdrs = ["matmul.h"],
    deps = [
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
    ],
)

spu_cc_library(
    name = "conversion",
    srcs = ["conversion.cc"],
    hdrs = ["conversion.h"],
    deps = [
        "//libspu/core:vectorize",
        "//libspu/mpc:ab_api",
        "//libspu/mpc:kernel",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
        "//libspu/mpc/common:communicator",
    ],
)

spu_cc_library(
    name = "compare",
    srcs = ["compare.cc"],
    hdrs = ["compare.h"],
    deps = [
        "//libspu/mpc:kernel",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
        "//libspu/mpc/common:communicator",
    ],
)

spu_cc_library(
    name = "logic",
    srcs = ["logic.cc"],
    hdrs = ["logic.h"],
    deps = [
        "//libspu/mpc:kernel",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
        "//libspu/mpc/common:communicator",
    ],
)

spu_cc_library(
    name = "truncate",
    srcs = ["truncate.cc"],
    hdrs = ["truncate.h"],
    deps = [
        "//libspu/mpc:kernel",
        "//libspu/mpc/bumblebee:state",
        "//libspu/mpc/bumblebee:type",
        "//libspu/mpc/common:communicator",
    ],
)

spu_cc_library(
    name = "algo",
    srcs = ["algo.cc"],
    hdrs = ["algo.h"],
    deps = [
        ":bumblebee_kernels",
        "//libspu/mpc/bumblebee/nonlinear:ring_ext_prot",
        "//libspu/core:encoding",
    ],
)

spu_cc_test(
    name = "algo_test",
    srcs = ["algo_test.cc"],
    deps = [
        ":algo",
        "//libspu/mpc/bumblebee:protocol",
        "//libspu/mpc/utils:simulate",
    ],
)
